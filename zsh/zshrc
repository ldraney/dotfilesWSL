set -o autopushd
#
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
#if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  #source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
#fi

ZSH_THEME="cloud"
#ZSH_THEME="powerlevel10k/powerlevel10k"


# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
 HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable auto-setting terminal title.
 DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
 COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"
export NVM_LAZY_LOAD=true
export NVM_COMPLETION=true

plugins=(
	#aliases
    vi-mode
    zsh-syntax-highlighting 
    zsh-autosuggestions
	#pyenv
	wd
	cd-gitroot
	#aws
    #docker
    #docker-compose
	#git 
	#tmux
    #python
    #zsh-navigation-tools
    #salt
    #git
    #fd
    #tmuxinator
	#terraform
	#npm
)
#
# vi mode
#bindkey -v

# Yank to the system clipboard
# may need to change for Windows
function vi-yank-xclip {
	zle vi-yank
	echo "$CUTBUFFER" | /mnt/c/windows/system32/clip.exe
}
zle -N vi-yank-xclip
bindkey -M vicmd 'y' vi-yank-xclip
#zle vi-yank

#for tmuxinator, use this: 
# wget https://raw.githubusercontent.com/tmuxinator/tmuxinator/master/completion/tmuxinator.zsh -O /usr/local/share/zsh/site-functions/_tmuxinator
source $ZSH/oh-my-zsh.sh

#if tmux isn't running, run it:
if tmux info &> /dev/null; then 
  #echo Tmux is running. Enjoy!
  pwd
  echo "\"autocomplete()\" for terraform, aws, github cli, nvm, docker"
else
	#tmux attach-session -t default
	tmux new-session -s default || tmux attach-session -t default
fi

#fix the tmux autocomplete color for Zsh
export TERM=xterm-256color 

#aliases
alias gq='$HOME/.customCommands/gitScript.sh'
alias setLoginBackground='$HOME/.customCommands/setLoginBackground'
alias gansPre='$HOME/.customCommands/gansPre.sh'
alias gans='$HOME/.customCommands/gitAns.sh'
alias gqAll='$HOME/.customCommands/gqAll.sh'
alias lt='ls -lt --color=always'
alias ltt='ls -lt --color=always | head'
#alias lt='echo "hi mom"'
alias cdg=cd-gitroot
alias k=kubectl
alias ter=terraform
alias vim=nvim
alias cheat='cheat -e'

findfile() {
	find .  -name $1
	find . -type f -name "*$1*"
}
findwordexact() {
	find . -exec grep -l -s $1 {} \;
}
findword() {
	find . -exec grep -i -l -s $1 {} \;
}
findwordToFile(){
	findword $1 > /tmp/$1.txt
}

findSecondword(){
	#findSecondWord [first-word] [second-word]
	# must run findwordToFile first
	#first input is the word, second input is the output file from findwordToFile
	xargs -o -n 1 grep -i -l -s $2 < /tmp/$1.txt
}
findSecondwordToFile(){
	#first input is the word, second input is the files from findwordToFile
	cat /tmp/$1.txt | xargs -o -n 1 grep -i -l -s $2 > /tmp/$2.txt
}

edit() {
	nvim < /tmp/$1.txt
}
check() {
	#xargs -o -n 1 nvim < /tmp/$1.txt
	xargs -o -n 1 -I {} nvim "{}" < /tmp/$1.txt #needed so that filenames with special characters and spaces were read correctly
	#while IFS= read -r line; do nvim -- "$line"; done < /tmp/$1.txt
}

#list only file names in current directory
findcur(){
	find ./ -printf "%f\n"
}

my_cheats()
{
  cheats=("${(f)$(cheat -l -t personal | tail -n +2 | cut -d' ' -f1)}")
  _describe -t cheats 'cheats' cheats
}

#add a new cheat file
#I releazed this isn't necessary, since any community file you edit is automatically moved to personal! and both coummnity and personal are already in my repo
#cheatAdd(){
#vim /home/ldraney/github/dotfilesWSL/cheat/cheatsheets/personal/$1.md
#}

#```zsh
#ZSH_HIGHLIGHT_STYLES[comment]='bg=red'
#```
#zle_highlight=(none)
#ZSH_HIGHLIGHT_STYLES[root]='bg=red'
#: ${ZSH_HIGHLIGHT_STYLES[comment]:='bg=purple'}
#ZSH_HIGHLIGHT_HIGHLIGHTERS+=(acme)

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
#[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#make sure user is in docker group!
#DOESNT WORK IS ENDLESS LOOP!
#newgrp docker
#

##gcloud autocomplete
#source $HOME/github/dotfilesWSL/google-cloud-sdk/completion.zsh.inc
#source $HOME/github/dotfilesWSL/google-cloud-sdk/path.zsh.inc
#source $HOME/google-cloud-sdk/completion.zsh.inc
#source $HOME/google-cloud-sdk/path.zsh.inc
#
#kubectl autocomplete
#source <(kubectl completion zsh)

#awscli2 autocomplete
#autoload bashcompinit && bashcompinit
#autoload -Uz compinit && compinit

#docker autocomplete
#fpath=(~/.zsh/completion $fpath)
#autoload -Uz compinit && compinit -i
##
##terraform autocomplete command is run on bootstrap.sh:
##terraform -install-autocomplete
##produces something like this:
##complete -o nospace -C /nix/store/q3q9mbv4w48hkwrpkbqvfnbn6r8v1967-terraform-1.3.3/bin/terraform terraform

##for terraform autocomplete
#autoload -U +X bashcompinit && bashcompinit
#complete -o nospace -C $(whereis terraform | cut -c 12-) terraform

##aws autocomplete
#complete -C '/usr/local/bin/aws_completer' aws

## github cli autocomplete
## https://www.ajfriesen.com/github-cli-auto-completion-with-oh-my-zsh/
#autoload -U compinit
#compinit -i

##what is nvm?
#export NVM_DIR="$HOME/.nvm"
#[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
#[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

#complete -o nospace -C /home/ldraney/.tfenv/versions/1.1.3/terraform terraform

function autocomplete() {
  fpath=(~/.zsh/completion $fpath)
  autoload -Uz compinit && compinit -i

  # for terraform autocomplete
  autoload -U +X bashcompinit && bashcompinit
  complete -o nospace -C $(whereis terraform | cut -c 12-) terraform

  # aws autocomplete
  complete -C '/usr/local/bin/aws_completer' aws

  # github cli autocomplete
  autoload -U compinit
  compinit -i

  # nvm
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

  complete -o nospace -C /home/ldraney/.tfenv/versions/1.1.3/terraform terraform
}


