#
#
#
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
#if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  #source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
#fi


ZSH_THEME="cloud"
#ZSH_THEME="powerlevel10k/powerlevel10k"


# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
 HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable auto-setting terminal title.
 DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
 COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

plugins=(
	aliases
    vi-mode
    zsh-syntax-highlighting 
    zsh-autosuggestions
	#pyenv
	#virtualenv 
	#virtualenvwrapper 
	wd
	cd-gitroot
	aws
    #docker
    #docker-compose
	#git 
	#tmux
    #python
    #zsh-navigation-tools
    #salt
    #git
    #fd
    #tmuxinator
	#terraform
	#npm
)
#
# vi mode
#bindkey -v

# Yank to the system clipboard
# may need to change for Windows
function vi-yank-xclip {
	zle vi-yank
	echo "$CUTBUFFER" | /mnt/c/windows/system32/clip.exe
}
zle -N vi-yank-xclip
bindkey -M vicmd 'y' vi-yank-xclip
#zle vi-yank

#for tmuxinator, use this: 
# wget https://raw.githubusercontent.com/tmuxinator/tmuxinator/master/completion/tmuxinator.zsh -O /usr/local/share/zsh/site-functions/_tmuxinator
source $ZSH/oh-my-zsh.sh

#if tmux isn't running, run it:
if tmux info &> /dev/null; then 
  #echo Tmux is running. Enjoy!
  pwd
else
	#tmux attach-session -t default
	tmux new-session -s default || tmux attach-session -t default
fi

#fix the tmux autocomplete color for Zsh
export TERM=xterm-256color 

findfile() {
    find .  -name $1
}
findwordexact() {
    find . -exec grep -l -s $1 {} \;
}
findword() {
    find . -exec grep -i -l -s $1 {} \;
}


#```zsh
#ZSH_HIGHLIGHT_STYLES[comment]='bg=red'
#```
#zle_highlight=(none)
#ZSH_HIGHLIGHT_STYLES[root]='bg=red'
#: ${ZSH_HIGHLIGHT_STYLES[comment]:='bg=purple'}
#ZSH_HIGHLIGHT_HIGHLIGHTERS+=(acme)

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#make sure user is in docker group!
#DOESNT WORK IS ENDLESS LOOP!
#newgrp docker
#
#for terraform autocomplete
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/bin/terraform terraform

#for NIX interactive shell
#!@bashInteractive@/bin/bash

# when using nix-shell, we will be invoked like this:
#
#     /path/to/result --rcfile /path/to/file
#
# When using nix-shell -i, we will be invoked like this:
#
#     /path/to/result /path/to/file
#
# We use the presence of --rcfile to decide if we're supposed
# to be run interactively or not.
#nix-zshell () {
#if [[ $1 = "--rcfile" ]]; then
  #rcfile="$2"
  #source "$rcfile"
  #exec @zsh@/bin/zsh --emulate zsh
#else
  #exec @bashInteractive@/bin/bash "$@"
#fi
#}

##gcloud autocomplete
source $HOME/github/dotfilesWSL/google-cloud-sdk/completion.zsh.inc
source $HOME/github/dotfilesWSL/google-cloud-sdk/path.zsh.inc
#source $HOME/google-cloud-sdk/completion.zsh.inc
#source $HOME/google-cloud-sdk/path.zsh.inc
#
#kubectl autocomplete
source <(kubectl completion zsh)

#awscli2 autocomplete
#autoload bashcompinit && bashcompinit
#autoload -Uz compinit && compinit

#docker autocomplete
fpath=(~/.zsh/completion $fpath)
autoload -Uz compinit && compinit -i
#
#
#terraform autocomplete command is run on bootstrap.sh:
#terraform -install-autocomplete
#produces something like this:
#complete -o nospace -C /nix/store/q3q9mbv4w48hkwrpkbqvfnbn6r8v1967-terraform-1.3.3/bin/terraform terraform

complete -o nospace -C /nix/store/q3q9mbv4w48hkwrpkbqvfnbn6r8v1967-terraform-1.3.3/bin/terraform terraform

#aws autocomplete
#complete -C '/usr/local/bin/aws_completer' aws

#for aws autocomplete
complete -C '/home/ldraney/.nix-profile/bin/aws_completer' aws

#compctl -K _gh gh


# github cli autocomplete
# https://www.ajfriesen.com/github-cli-auto-completion-with-oh-my-zsh/
autoload -U compinit
compinit -i


# cheatsheet autocomplete
#/home/ldraney/.zfunc/cheat.zsh
